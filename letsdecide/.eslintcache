[{"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/index.js":"1","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/App.js":"2","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/reportWebVitals.js":"3","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/firebase.js":"4","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/shared/Navbar.js":"5","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/Lobby.js":"6"},{"size":500,"mtime":1607122465800,"results":"7","hashOfConfig":"8"},{"size":4965,"mtime":1607486351644,"results":"9","hashOfConfig":"8"},{"size":390,"mtime":1607480835944,"results":"10","hashOfConfig":"8"},{"size":458,"mtime":1607124764260,"results":"11","hashOfConfig":"8"},{"size":588,"mtime":1607487285214,"results":"12","hashOfConfig":"8"},{"size":2807,"mtime":1607476768094,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"b3lr6k",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/index.js",[],["29","30"],"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/App.js",["31"],"import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\nimport Container from \"@material-ui/core/Container\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport NavBar from \"./shared/Navbar\";\nimport Lobby from \"./Lobby.js\"\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      room_code: \"\",\n      entered_room: false,\n      suggestion:'',\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.handleCreateRoom = this.handleCreateRoom.bind(this)\n  }\n\n  handleChange(evt) {\n    this.setState({\n      ...this.state,\n      [evt.target.name]: evt.target.value || '',\n    });\n  }\n\n  handleCreateRoom(event){\n    if(this.state.username === \"\"){\n      this.setState({error:true})\n    } else{\n      event.preventDefault()\n      const db = firebase.firestore();\n      let r = Math.random().toString(36).substring(7);\n      db.collection(\"rooms\").doc(r).collection('users').doc(this.state.username).set({name: this.state.username})\n      this.setState({entered_room: true, room_code: r})\n   }\n  }\n  handleSubmit(event){\n    event.preventDefault()\n    if(this.state.username === \"\"){\n      this.setState({error:true})\n    } else{\n      event.preventDefault()\n      const db = firebase.firestore();\n      const ref =  db.collection(\"rooms\").doc(this.state.room_code).collection('users')\n      const user_ref = ref.doc(this.state.username).set({name: this.state.username})\n      this.setState({entered_room: true, room_code: this.state.room_code})\n   }\n  }\n  handleAddSuggestion(event){\n    event.preventDefault()\n    if(this.state.suggestion === \"\"){\n      alert(\"specify suggestion\")\n    } else{\n      const db = firebase.firestore();\n      const ref =  db.collection(\"rooms\").doc(this.state.room_code).collection('suggestions')\n      ref.add({\n        title: this.state.suggestion,\n        votes: 0\n      })\n      this.setState({suggestion: ''})\n   }\n  }\n\n  render() {\n    if (this.state.entered_room) {\n      return(\n        <Box>\n          <NavBar />\n          <Container id=\"login-view\" align=\"center\" fixed>\n            <Box mb={1}>\n              <h3>Room Code: {this.state.room_code}</h3>\n              <form display=\"flex\" align=\"center\" onSubmit={this.handleAddSuggestion.bind(this)}>\n                <Box mt={3} justifyContent=\"center\" display=\"flex\">\n                    <TextField id=\"outlined-basic\" onChange={(event)=> {this.handleChange(event)}} value={this.state.suggestion} name=\"suggestion\" label=\"Add a Suggestion\" variant=\"outlined\" />\n                    <Button type=\"submit\" variant=\"outlined\" size='large' color=\"primary\">\n                      Submit\n                    </Button>\n                </Box>\n              </form>\n            </Box>\n            <Lobby username={this.state.username} room_code={this.state.room_code}/>\n          </Container>\n       </Box>\n      )\n    } else{\n      return (\n        <div>\n          <NavBar />\n          <Container id=\"login-view\" align=\"center\" fixed>\n            <Box mt={5}>\n              <Typography variant=\"h6\" component=\"h6\">\n                1. Choose Temporary Username\n              </Typography>\n              <TextField\n                required\n                inputProps={{ style: { textAlign: \"center\" } }}\n                align=\"center\"\n                label=\"Username\"\n                variant=\"filled\"\n                error={this.state.error}\n                name=\"username\"\n                data-testid=\"username\" \n                onChange={(event)=> {this.handleChange(event)}}\n              />\n              <Box mt={2}>\n                <Typography mt={3} variant=\"h6\" component=\"h6\">\n                  2. Join or Create a Room\n                </Typography>\n              </Box>\n              <Box\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"flex-end\"\n              >\n              \n                <Button data-testid=\"create\" variant=\"contained\" style={{marginRight: '10px'}} onClick={this.handleCreateRoom} color=\"primary\" disableElevation>\n                  Create\n                </Button>\n                <Typography display=\"inline\" variant=\"h6\" component=\"h6\">\n                  or...\n                </Typography>\n                <form onSubmit={this.handleSubmit.bind(this)}>\n                  <TextField\n                    style={{marginLeft: '10px'}}\n                    inputProps={{ style: { textAlign: \"center\" } }}\n                    align=\"center\"\n                    label=\"Join\"\n                    name=\"room_code\"\n                    onChange={(event)=> {this.handleChange(event)}}/>\n                </form>\n              </Box>\n            </Box>\n          </Container>\n        </div>\n      );\n  }\n}\n}\n\nexport default App;\n","/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/reportWebVitals.js",[],"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/firebase.js",[],"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/shared/Navbar.js",["32"],"/home/jyk2149/Linux Fall2020/OpenSourceDevelopment/Let-s-Decide/letsdecide/src/Lobby.js",["33","34","35","36"],"import React, { useEffect, useState } from 'react';\nimport firebase from \"./firebase\";\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nimport Box from '@material-ui/core/Box';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Badge from '@material-ui/core/Badge';\nimport Chip from '@material-ui/core/Chip';\n\n\nconst Lobby = (props) => {\n  const db = firebase.firestore()\n  const usersRef = db.collection(\"rooms\").doc(props.room_code).collection(\"users\")\n  const query = usersRef.limit(25);\n  const [users] = useCollectionData(query);\n  const suggestionsRef = db.collection(\"rooms\").doc(props.room_code).collection(\"suggestions\")\n  const suggestionsQuery = suggestionsRef.limit(25);\n  const [suggestions] = useCollectionData(suggestionsQuery,{idField: 'id'});\n  useEffect(() => {\n    const cleanup = () => {\n      usersRef.doc(props.username).delete()\n      usersRef.get().then(function(querySnapshot){\n        if(querySnapshot.numChildren() == 0){\n          db.collection(\"rooms\").doc(props.room_code).delete()\n        }\n      })\n    }\n    window.onbeforeunload = cleanup;\n\n    window.addEventListener('beforeunload', cleanup);\n    return function end() {\n      window.removeEventListener('beforeunload', cleanup);\n      }\n  })\n\n  const handleClick = (suggestion) => {\n    suggestionsRef.doc(suggestion.id).update({\n      votes: firebase.firestore.FieldValue.increment(1)\n    })\n  }\n\n  return (\n      <Box>\n        Suggestions:\n        <Box display=\"flex\" flexWrap=\"wrap\" justifyContent=\"flex-start\">\n          {suggestions && suggestions.map(s=>\n                <Box key={s.id} display=\"inline\" ml={1} mr={1} mb={3}>\n                  <Badge showZero badgeContent={s.votes} color=\"primary\">\n                    <Chip onClick={() => {handleClick(s)}} label={s.title}/>\n                  </Badge>\n                </Box>\n          )}\n        </Box>\n        <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Users:</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {users && users.map(user=> <TableRow key={user.name}><TableCell component=\"th\" scope=\"row\">{user.name}</TableCell></TableRow>)}\n                </TableBody>\n              </Table>\n            </TableContainer>\n      </Box>\n      )\n}\nfunction Suggestions(props){\n  const name = props.name;\n\n}\nexport default Lobby;\n\n\n\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":53,"column":13,"nodeType":"43","messageId":"44","endLine":53,"endColumn":21},{"ruleId":"41","severity":1,"message":"45","line":6,"column":8,"nodeType":"43","messageId":"44","endLine":6,"endColumn":17},{"ruleId":"41","severity":1,"message":"46","line":1,"column":28,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},{"ruleId":"47","severity":1,"message":"48","line":29,"column":40,"nodeType":"49","messageId":"50","endLine":29,"endColumn":42},{"ruleId":"41","severity":1,"message":"51","line":75,"column":10,"nodeType":"43","messageId":"44","endLine":75,"endColumn":21},{"ruleId":"41","severity":1,"message":"52","line":76,"column":9,"nodeType":"43","messageId":"44","endLine":76,"endColumn":13},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'user_ref' is assigned a value but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'useState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Suggestions' is defined but never used.","'name' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]